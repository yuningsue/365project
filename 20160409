import java.util.Iterator;
import java.util.NoSuchElementException;


public class Deque<E> implements Iterable {

    private Object[] Data;
    private int size;
    private static final int initial = 10;

    public Deque(){
        this.Data = new Object[initial];
        size = 0;
    }

    public boolean isEmpty(){
        return size == 0;
    }

    public int size(){
        return size;
    }

    public void addFirst(E e){
        if(e == null) 
            throw new NullPointerException();
        for(int i = size++ ; i > 0 ; i--)
            Data[i] = Data[i-1];
        Data[0] = e;
        resize();
    }

    public void addLast(E e){
        if(e == null) 
            throw new NullPointerException();
        Data[size++] = e;
        resize();
    }

    public E removeFirst(){
        if(isEmpty()) 
            throw new NoSuchElementException();
        E first = (E) Data[0];
        for(int i = 0 ; i < size-1 ; i++)
           Data[i] = Data[i+1];
        size--;
        resize();
        return first;
    }

    public E removeLast(){
        if(isEmpty()) 
            throw new NoSuchElementException();
        resize();
        return (E) Data[size--];
    }



    private void resize(){
        if(size == Data.length){
            Object[] copy = new Object[2*Data.length];
            for(int i = 0 ; i < size ; i++){
                copy[i] = Data[i];
            }
            Data = copy;
        } else if (size <= Data.length/4){
            Object[] copy = new Object[Data.length/2];
            for(int i = 0 ; i < size ; i++){
                copy[i] = Data[i];
            }
            Data = copy;
        }
    }



    public Iterator<E> iterator() {
        Iterator<E> iterator = new Iterator<E>() {

            private int index = 0;

            public boolean hasNext() {
                return index < size;
            }

            public E next() {
                if(!hasNext()) throw new NoSuchElementException();
                return (E) Data[index++];
            }

            public void remove(){
                throw new UnsupportedOperationException();
            }

        };
        return iterator;
    }
}
