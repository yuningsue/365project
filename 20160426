# -*- coding: utf-8 -*-

data = \
    [["ANNUMINAS","FORNOST",12],
     ["FORNOST","ANNUMINAS",12],
     ["FORNOST","GREYHAVENS",39],
     ["FORNOST","HOBBITON",17],
     ["FORNOST","BREE",11],
     ["GREYHAVENS","FORNOST",39],
     ["GREYHAVENS","MICHELDELVING",14],
     ["MICHELDELVING","GREYHAVENS",14],
     ["MICHELDELVING","HOBBITON",2],
     ["MICHELDELVING","THARBAD",31],
     ["HOBBITON","FORNOST",17],
     ["HOBBITON","MICHELDELVING",2],
     ["HOBBITON","BREE",13],
     ["BREE","FORNOST",11],
     ["BREE","HOBBITON",13],
     ["BREE","THARBAD",21],
     ["THARBAD","BREE",21],
     ["THARBAD","MICHELDELVING",31]]
     


def show_the_shortest_path(start, end):
### START YOUR CODE HERE ###
    from_node = node.index(start)
    to_node = node.index(end)
    dijkstrapath = DijkstraExtendPath(node_map)
    path = dijkstrapath(from_node, to_node)
    name=[]
    name.append('The shortest path: ')
    name.append(node[path[0][0]])
    for i in range(1,len(path)):
        name.append(' > ')
        name.append(path[i][1]-path[i-1][1])
        name.append('km > ')
        name.append(node[path[i][0]])
        
    
    str1 = ''.join(str(e) for e in name)
    print str1

class DijkstraExtendPath():
    def __init__(self, node_map):
        self.node_map = node_map
        self.node_length = len(node_map)
        self.used_node_list = []
        self.collected_node_dict = {}
    def __call__(self, from_node, to_node):
        self.from_node = from_node
        self.to_node = to_node
        self._init_dijkstra()
        return self._format_path()
    def _init_dijkstra(self):
        self.used_node_list.append(self.from_node)
        self.collected_node_dict[self.from_node] = [0, -1]
        for index1, node1 in enumerate(self.node_map[self.from_node]):
            if node1:
                self.collected_node_dict[index1] = [node1, self.from_node]
        self._foreach_dijkstra()
    def _foreach_dijkstra(self):
        if len(self.used_node_list) == self.node_length - 1:
            return
        for key, val in self.collected_node_dict.items(): 
            if key not in self.used_node_list and key != to_node:
                self.used_node_list.append(key)
            else:
                continue
            for index1, node1 in enumerate(self.node_map[key]):  
                if node1 and index1 in self.collected_node_dict and self.collected_node_dict[index1][0] > node1 + val[0]:
                    self.collected_node_dict[index1][0] = node1 + val[0] 
                    self.collected_node_dict[index1][1] = key
                elif node1 and index1 not in self.collected_node_dict:
                    self.collected_node_dict[index1] = [node1 + val[0], key] 
        self._foreach_dijkstra()
    def _format_path(self):
        node_list = []
        temp_node = self.to_node
        node_list.append((temp_node, self.collected_node_dict[temp_node][0]))
        while self.collected_node_dict[temp_node][1] != -1:
            temp_node = self.collected_node_dict[temp_node][1]
            node_list.append((temp_node, self.collected_node_dict[temp_node][0]))
        node_list.reverse()
        return node_list

def set_node_map(node_map, node, node_list):
    for x, y, val in node_list:
        node_map[node.index(x)][node.index(y)] = node_map[node.index(y)][node.index(x)] =  val
node = [" ","ANNUMINAS", "FORNOST", "GREYHAVENS", "MICHELDELVING", "HOBBITON", "BREE", "THARBAD"]
node_list =  data
node_map = [[0 for val in xrange(len(node))] for val in xrange(len(node))]
set_node_map(node_map, node, node_list)
from_node=0
to_node=0

### END YOUR CODE HERE ####
show_the_shortest_path("ANNUMINAS","BREE")
